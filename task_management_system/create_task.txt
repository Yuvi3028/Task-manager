# def user_profile(request):
#     return render(request, 'profile.html')

@login_required
@admin_required
def delete_task(request, task_id):
    if request.method == 'POST':
        task = Task.objects.get(id=task_id)
        task.delete()
    return redirect(reverse('category_list'))

@login_required
def update_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)  # Get the task by its ID
    users = User.objects.all()
    if request.method == 'POST':
        form = TaskForm(request.POST)  # Pre-populate the form with the existing task data
        if form.is_valid():
                # Get the user by username from the form data
                assigned_user = User.objects.get(username=form.cleaned_data['assigned_to'])

                # Create and save the task in the database
                task = form.save(commit=False)  # Create the task but don't save it yet
                task.assigned_to = assigned_user  # Set assigned user manually
                task.save()  # Now save the task

                # Show success message and redirect to the home page
                messages.success(request, 'Task has been successfully created!')
                return redirect('view_task_list')# Redirect back to the home page or a list of tasks
        else:
            # If the form is not valid, print the errors for debugging
            messages.error(request, 'Form submission error. Please check the input data.')
    else:
        form = TaskForm()  # Initialize the form with the existing task data
    
    return render(request, 'task_management_system_app/update_task.html', {'form': form, 'task': task, 'user': users})



@login_required
@admin_required
def category_list(request):
    categories = Category.objects.all()
    return render(request, 'task_management_system_app/category_list.html', {'categories': categories})


@login_required
@admin_required
def create_category(request):
    if request.method == 'POST':
        form = CategoryForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('category_list')  # Replace with your desired redirect
    else:
        form = CategoryForm()
    return render(request, 'create_category.html', {'form': form})

def create_category_view(request):
    if request.method == 'POST':
        form = CategoryForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('home')  # Redirect to a success page or another view
    else:
        form = CategoryForm()
    return render(request, 'create_category.html', {'form': form})

@login_required
@admin_required
def delete_category(request, category_id):
    category = Category.objects.get(pk=category_id)
    if category.task_set.exists():
        messages.error(
            request, "You cannot delete this category as it contains tasks.")
    else:
        category.delete()
        messages.success(request, "Category deleted successfully.")
    return redirect('category_list')


@login_required
@admin_required
def category_tasks(request, category_id):
    category = get_object_or_404(Category, pk=category_id)
    tasks = category.task_set.all()
    return render(request, 'task_management_system_app/category_tasks.html', {'category': category, 'tasks': tasks})


# @login_required
# @admin_required
def task_chart(request):
    categories = Category.objects.all()
    users = User.objects.all()

    # Count pending tasks by category
    pending_counts_by_category = {}
    for category in categories:
        pending_counts_by_category[category.name] = Task.objects.filter(
            category=category,
            start_date__gt=timezone.now()  # Pending tasks (not started yet)
        ).count()

    # Count pending tasks by user
    pending_counts_by_user = {}
    for user in users:
        pending_counts_by_user[user.username] = Task.objects.filter(
            assigned_to=user,
            start_date__gt=timezone.now()  # Pending tasks (not started yet)
        ).count()

    return render(
        request,
        'task_management_system_app/task_chart.html',
        {
            'pending_counts_by_category': pending_counts_by_category,
            'pending_counts_by_user': pending_counts_by_user,
        }
    )


# path('profile/', views.user_profile, name='profile'),
# path('task-chart/', views.task_chart, name='task_chart'),
# path('update-assigned-user/', views.update_assigned_user, name='update_assigned_user'),
# path('task/<int:task_id>/edit/', views.update_task, name='update_task'),
# path('tasks/update/<int:task_id>/', views.update_task, name='update_task'),
# path('', views.category_list, name='category_list'),
# path('categories/create/', views.create_category, name='create_category'),
# path('categories/<int:category_id>/', views.category_tasks, name='category_tasks'),
# path('categories/delete/<int:category_id>/', views.delete_category, name='delete_category'),
# path('user/', views.user_tasks_list, name='user_tasks_list'),